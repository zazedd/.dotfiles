# Auto-generated using compose2nix v0.3.2-pre.
{
  pkgs,
  lib,
  config,
  ...
}:

{
  # Runtime
  virtualisation.podman = {
    enable = true;
    autoPrune.enable = true;
    dockerCompat = true;
  };

  # Enable container name DNS for all Podman networks.
  networking.firewall.interfaces =
    let
      matchAll = if !config.networking.nftables.enable then "podman+" else "podman*";
    in
    {
      "${matchAll}".allowedUDPPorts = [ 53 ];
    };

  virtualisation.oci-containers.backend = "podman";

  # Containers
  virtualisation.oci-containers.containers."trackmania_db" = {
    image = "mysql:5";
    env_file = "/srv/trackmania/.env-mysql";
    volumes = [
      "tmnf_trackmania-db:/var/lib/mysql:rw"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=db"
      "--network=tmnf_default"
    ];
  };
  systemd.services."podman-trackmania_db" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
    };
    after = [
      "podman-network-tmnf_default.service"
      "podman-volume-tmnf_trackmania-db.service"
    ];
    requires = [
      "podman-network-tmnf_default.service"
      "podman-volume-tmnf_trackmania-db.service"
    ];
    partOf = [
      "podman-compose-tmnf-root.target"
    ];
    wantedBy = [
      "podman-compose-tmnf-root.target"
    ];
  };
  virtualisation.oci-containers.containers."trackmania_phpmyadmin" = {
    image = "phpmyadmin/phpmyadmin";
    environment = {
      "PMA_HOST" = "db";
    };
    ports = [
      "8080:80/tcp"
    ];
    dependsOn = [
      "trackmania_db"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=pma"
      "--network=tmnf_default"
    ];
  };
  systemd.services."podman-trackmania_phpmyadmin" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
    };
    after = [
      "podman-network-tmnf_default.service"
    ];
    requires = [
      "podman-network-tmnf_default.service"
    ];
    partOf = [
      "podman-compose-tmnf-root.target"
    ];
    wantedBy = [
      "podman-compose-tmnf-root.target"
    ];
  };
  virtualisation.oci-containers.containers."trackmania_tmserver" = {
    image = "fanyx/tmserver:2.2.3";
    env_file = "/srv/trackmania/.env";
    volumes = [
      "/srv/trackmania/config:/var/lib/xaseco/config:rw"
      "/srv/trackmania/plugins:/var/lib/xaseco/plugins/custom:rw"
      "/srv/trackmania/tracks:/var/lib/tmserver/GameData/Tracks/Challenges/Custom:rw"
    ];
    ports = [
      "2350:2350/tcp"
      "2350:2350/udp"
      "3450:3450/udp"
    ];
    dependsOn = [
      "trackmania_db"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=tmserver"
      "--network=tmnf_default"
    ];
  };
  systemd.services."podman-trackmania_tmserver" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
    };
    after = [
      "podman-network-tmnf_default.service"
    ];
    requires = [
      "podman-network-tmnf_default.service"
    ];
    partOf = [
      "podman-compose-tmnf-root.target"
    ];
    wantedBy = [
      "podman-compose-tmnf-root.target"
    ];
  };

  # Networks
  systemd.services."podman-network-tmnf_default" = {
    path = [ pkgs.podman ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "podman network rm -f tmnf_default";
    };
    script = ''
      podman network inspect tmnf_default || podman network create tmnf_default
    '';
    partOf = [ "podman-compose-tmnf-root.target" ];
    wantedBy = [ "podman-compose-tmnf-root.target" ];
  };

  # Volumes
  systemd.services."podman-volume-tmnf_trackmania-db" = {
    path = [ pkgs.podman ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
    };
    script = ''
      podman volume inspect tmnf_trackmania-db || podman volume create tmnf_trackmania-db
    '';
    partOf = [ "podman-compose-tmnf-root.target" ];
    wantedBy = [ "podman-compose-tmnf-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."podman-compose-tmnf-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
